var TarefaBox = React.createClass({
    loadTarefasFromServer: function () {
        var xhr = new XMLHttpRequest();
        xhr.open('get', this.props.url, true);
        xhr.onload = function () {
            var data = JSON.parse(xhr.responseText);
            this.setState({ data: data });
        }.bind(this);
        xhr.send();
    },
    handleTarefaSubmit: function (tarefa) {
        var tarefas = this.state.data;
        // Optimistically set an id on the new tarefa. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        tarefa.id = Date.now();
        var newTarefas = tarefas.concat([tarefa]);
        this.setState({ data: newTarefas });

        var data = new FormData();
        data.append('descricao', tarefa.descricao);

        var xhr = new XMLHttpRequest();
        xhr.open('post', this.props.submitUrl, true);
        xhr.onload = function () {
            this.loadTarefasFromServer();
        }.bind(this);
        xhr.send(data);
    },
    getInitialState: function () {
        return { data: this.props.initialData };
    },
    componentDidMount: function () {
        window.setInterval(this.loadTarefasFromServer, this.props.pollInterval);
    },
    render: function () {
        return (
            <div className="tarefaBox">
                <h1>Tarefas</h1>
                <fieldset>
                    <legend>Tarefas Em Aberto</legend>
                <TarefaList data={this.state.data} />
                <TarefaForm onTarefaSubmit={this.handleTarefaSubmit} />
                </fieldset>
            </div>
        );
    }
});

var TarefaBoxFinalizadas = React.createClass({
    loadTarefasFromServer: function () {
        var xhr = new XMLHttpRequest();
        xhr.open('get', this.props.url, true);
        xhr.onload = function () {
            var data = JSON.parse(xhr.responseText);
            this.setState({ data: data });
        }.bind(this);
        xhr.send();
    },
    
    getInitialState: function () {
        return { data: this.props.initialData };
    },
    componentDidMount: function () {
        window.setInterval(this.loadTarefasFromServer, this.props.pollInterval);
    },
    render: function () {
        return (
            <fieldset>
                <legend>Tarefas Finalizadas</legend>
                <div className="tarefaBoxFinalizadas">
                    <TarefaListFinalizada data={this.state.data} />
                </div>
            </fieldset>
        );
    }
});

var TarefaList = React.createClass({
    render: function () {
        var tarefaNodes = this.props.data.map(function (tarefa) {
            return (
                <Tarefa descricao={tarefa.descricao} key={tarefa.id}>
                    {tarefa.descricao}
                </Tarefa>
            );
        });
        return (
            <div className="tarefaList">
                {tarefaNodes}
            </div>
        );
    }
});

var TarefaListFinalizada = React.createClass({
    render: function () {
        var tarefaNodes = this.props.data.map(function (tarefa) {
            return (
                <TarefaFinalizada descricao={tarefa.descricao} key={tarefa.id}>
                    {tarefa.descricao}
                </TarefaFinalizada>
            );
        });
        return (
            <div className="tarefaListFinalizada">
                {tarefaNodes}
            </div>
        );
    }
});

var TarefaForm = React.createClass({
    getInitialState: function () {
        return { descricao: ''};
    },
    handleDescricaoChange: function (e) {
        this.setState({ descricao: e.target.value });
    },    
    handleSubmit: function (e) {
        e.preventDefault();
        var descricao = this.state.descricao.trim();
        if (!descricao) {
            return;
        }
        this.props.onTarefaSubmit({ descricao: descricao });
        this.setState({ descricao: ''});
    },
    render: function () {
        return (
            <form className="tarefaForm" onSubmit={this.handleSubmit}>
                <input
                    type="text"
                    placeholder="Your name"
                    value={this.state.descricao}
                    onChange={this.handleDescricaoChange}
                />
                <input type="submit" value="Post" />
            </form>
        );
    }
});

function createRemarkable() {
    var remarkable = (("undefined" != typeof global) && (global.Remarkable)) ? global.Remarkable : window.Remarkable;
    return new remarkable();
}

var Tarefa = React.createClass({
    rawMarkup: function () {
        var md = createRemarkable();
        var rawMarkup = md.render(this.props.children.toString());
        return { __html: rawMarkup };
    },
    render: function () {
        return (            
                <div className="tarefa">
                    <h2 className="tarefaDescricao">
                        {this.props.descricao}
                    </h2>
                    <span dangerouslySetInnerHTML={this.rawMarkup()} />
                </div>
        );
    }
});

var TarefaFinalizada = React.createClass({
    rawMarkup: function () {
        var md = createRemarkable();
        var rawMarkup = md.render(this.props.children.toString());
        return { __html: rawMarkup };
    },
    render: function () {
        return (
                <div className="tarefaFinalizada">
                    <h2 className="tarefaDescricao">
                        {this.props.descricao}
                    </h2>
                    <span dangerouslySetInnerHTML={this.rawMarkup()} />
                </div>
        );
    }
});